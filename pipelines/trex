//library 'pipeline-library@bugfix/release_prod_JIR1358'

def testLib = library(identifier: 'pipeline-library-praxis@master', retriever: modernSCM(
        [$class: 'GitSCMSource',
         credentialsId: '80c184b4-f074-49c4-8c6f-7f7e438edca4',
         remote: 'https://rndwww.nce.amadeus.net/git/scm/test_headless/pipeline.git']))


// Init log with debug mode, defined with param called 'pp_debug' which MUST exist
logUtils.init(this);
log("Start pipeline");

//////////////////////////////
//// Pipeline begins here ////
//////////////////////////////
stage('check out branch') {

    node(label) {
        echo "Label applied: $label";
        deleteDir();
        checkoutRepo(GIT_URL, RELEASE, REFSPEC);
        try {
            sh "mvn -B clean compile";
            stash includes: '**', name: 'sources'
        }
        finally {
            if (fileExists("target/CodeNarcAntReport.html")) {
                dir('target') {
                    archiveArtifacts 'CodeNarcAntReport.html'
                }
            }
        }
    }
}

stage('create selenium grid') {

        echo "instance number is ${FORK.count} "

}


stage('Prepare split') {
    node('master') {
        deleteDir();
        timestamps {
            unstash 'sources';
            testsByNodes = splitTests("${WORKSPACE}/src/main", CAMPAIGN_TEST, label); // store tests in global var.
            log("splits: $testsByNodes label applied:$label");
        }
    }
}

//Launch all tests stages in parallel
paralUtils.parallelize_tests(testsByNodes, 'tests', 'inclusions.txt', 'target/surefire-reports/TEST-*.xml',
        {
            deleteDir();
            writeFile file: "node.txt", text: "$NODE_NAME"; // for info about node;
            unstash 'sources';
        },
        {
            // with external params
            sh "mvn -B -f pom.xml surefire:test   -DskipCodeNarc=true  ${GRID}  -Dmaven.test.failure.ignore=true ${SITE_CODE} -D${TEST_URL}=${URL_TEST} ${GHOST}  -Dsurefire.includesFile=\"inclusions.txt\" ";
            if (fileExists("target/spock-reports/aggregated_report.json")) {
                sh "mv target/spock-reports/aggregated_report.json   target/spock-reports/aggregated_report.json.${NODE_NAME}_${EXECUTOR_NUMBER}";
            }

            // useless unless if we can use the official one, oherwise we will get a patched version after
            sh "cp src/main/resources/templates/summary-template.html target/spock-reports";

            dir('target') {
                archiveArtifacts 'surefire-reports/**, spock-reports/**';
            }
        }
)

stage("Summary") {
    node("master") {
        dir('spock-reports') { deleteDir() };
        step($class: 'hudson.plugins.copyartifact.CopyArtifact', projectName: "${JOB_NAME}", filter: "spock-reports/**",
                selector: [$class: 'SpecificBuildSelector', buildNumber: "${BUILD_NUMBER}"]);

        spockReports.patchSummaryTemplate();
        spockReports.concatAggregate();
        spockReports.generateSpockReport();

        echo "archiving summary file";
        archiveArtifacts 'spock-reports/full_summary.html';
    }
}

// check if ALM is asked from TRex: Properties are expanded if so!
if (!PROJECT_TO_BUILD.equals("\${PROJECT_TO_BUILD}")) {
    stage('ALM') {
        node(label) {
            echo "Label applied: $label";
            if (currentBuild.resultIsBetterOrEqualTo("UNSTABLE")) {
                echo "Launching ALM with params: " + PREDEF_BUILD_PARAM;
                build job: PROJECT_TO_BUILD, parameters: [string(name: 'PARAM', value: PREDEF_BUILD_PARAM)];
            } else {
                echo "Don't launch ALM as build result is not OK not Unstable..";
            }
        }
    }
} else {
    echo "No ALM required.";
}

echo "End Pipeline";